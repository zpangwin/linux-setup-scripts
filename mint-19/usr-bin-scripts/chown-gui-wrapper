#!/bin/bash

# v1.2.0
# Last updated on 2019 Oct 15

prompt_on_multiple_files="true";
default_to_once_for_all_paths_if_no_prompt="true";
apply_once_for_all_paths="false";

has_multiple_paths="false";
second_file="$2";
if [[ "" != "${second_file}" ]]; then
	has_multiple_paths="true";

	if [[ "true" == "${prompt_on_multiple_files}" ]]; then
		prompt_response=$( yad --center --button="gtk-ok:0" --title "Multiple Paths Detected" --form --field="\n    How would you like to apply permissions?    \n:LBL" "" --field="${label_hpadding}:CB" "Set permissions once and apply it to all paths\!Set permissions for each path individually");
		if [[ ! $prompt_response =~ ^.*individually.*$ ]]; then
			apply_once_for_all_paths="true";
		fi
	elif [[ "true" == "${default_to_once_for_all_paths_if_no_prompt}" ]]; then
		apply_once_for_all_paths="true";
	fi
fi

echo "prompt_on_multiple_files=\"${prompt_on_multiple_files}\"";
echo "default_to_once_for_all_paths_if_no_prompt=\"${default_to_once_for_all_paths_if_no_prompt}\"";
echo "apply_once_for_all_paths=\"${apply_once_for_all_paths}\"";

popup_title="Please select the user and group owners";
popup_text="Please select the user and group owners for the following path:"
label_hpadding="    ";

for filepath in "${@}"; do
	#echo "filepath in array is $filepath";

	if [[ ! -e "${filepath}" ]]; then
		ERROR_MSG="ERROR: File '${filepath}' does not exist";
		notify-send --icon=error "${ERROR_MSG}";
		echo "${ERROR_MSG}";
		continue;
	fi
	filename=$(basename "${filepath}")
	current_user=$(stat -c "%U" "${filepath}");
	current_group=$(stat -c "%G" "${filepath}");

	show_checkbox="false";
	if [[ -d "${filepath}" ]]; then
		show_checkbox="true";
	fi

	# get list of non-service accounts/groups
	users_list=$(getent passwd|grep -v nobody|grep -P ":[1-9]\\d{3,}:"|awk -F: '{print $1}'|tr '\n' ' ');
	groups_list=$(getent group|grep -v nobody|grep -P ":[1-9]\\d\\d\\d+:"|awk -F: '{print $1}'|tr '\n' ' ');

	sorted_user_list=$(echo $(printf '%s\n' root $users_list | sort -u)|sed -E "s/\\b($current_user)\\b/^\\1/g"|tr ' ' '\!');
	sorted_group_list=$(echo $(printf '%s\n' root $groups_list | sort -u)|sed -E "s/\\b($current_group)\\b/^\\1/g"|tr ' ' '\!');

	echo "filename=\"${filename}\"";
	echo "current_user=\"${current_user}\"";
	echo "current_group=\"${current_group}\"";
	echo "show_checkbox=\"${show_checkbox}\"";
	echo "users_list=\"${users_list}\"";
	echo "groups_list=\"${groups_list}\"";
	echo "sorted_user_list=\"${sorted_user_list}\"";
	echo "sorted_group_list=\"${sorted_group_list}\"";

	#echo "show_checkbox: ${show_checkbox}";
	if [[ "true" == "${show_checkbox}" ]]; then
		formdata=$(yad --center --button="gtk-cancel:1" --button="gtk-ok:0" --title "${popup_title}" --form --field="\n${label_hpadding}${popup_text}${label_hpadding}\n:LBL" "" --field="${label_hpadding}Path:${label_hpadding}:RO" "${filepath}" --field="${label_hpadding}User:${label_hpadding}:CBE" "${sorted_user_list}" --field="${label_hpadding}Group:${label_hpadding}:CBE" "${sorted_group_list}" --field "\n:LBL" "" --field="Apply Recursively?:CHK" "FALSE");
	else
		formdata=$(yad --center --button="gtk-cancel:1" --button="gtk-ok:0" --title "${popup_title}" --form --field="\n${label_hpadding}${popup_text}${label_hpadding}\n:LBL" "" --field="${label_hpadding}Path:${label_hpadding}:RO" "${filepath}" --field="${label_hpadding}User:${label_hpadding}:CBE" "${sorted_user_list}" --field="${label_hpadding}Group:${label_hpadding}:CBE" "${sorted_group_list}");
	fi
	if [[ "" == "$formdata" ]]; then
		echo "user pressed cancel for filepath '${filepath}'";
		continue;
	fi
	echo "formdata=\"${formdata}\"";

	new_user=$(echo "${formdata}"|awk -F'|' '{print $3}');
	new_group=$(echo "${formdata}"|awk -F'|' '{print $4}');
	is_recursive="FALSE";
	if [[ "true" == "${show_checkbox}" ]]; then
		is_recursive=$(echo "${formdata}"|awk -F'|' '{print $6}');
	fi
	echo "new_user=\"${new_user}\"";
	echo "new_group=\"${new_group}\"";
	echo "is_recursive=\"${is_recursive}\"";

	RECURSIVE_FLAG='';
	if [[ "TRUE" == "${is_recursive}" ]]; then
		RECURSIVE_FLAG='-R';
	fi

	if [[ "true" == "${has_multiple_paths}" && "true" == "${apply_once_for_all_paths}" ]]; then
		chown $RECURSIVE_FLAG "${new_user}":"${new_group}" "${@}";
		break;
	else
		chown $RECURSIVE_FLAG "${new_user}":"${new_group}" "${filepath}";
	fi
done

